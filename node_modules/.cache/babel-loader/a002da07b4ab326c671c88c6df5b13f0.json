{"ast":null,"code":"var _jsxFileName = \"/Users/jatinpartaprana/Documents/reactCourse/monosters-rolodex/src/App.js\";\nimport React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from './components/search-box/search-box.component';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = e => {\n      this.setState;\n    };\n\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n  } // when react renders or puts the component on the dom FOR THE FIRST TIME. and calls the block of code inside it.\n\n\n  componentDidMount() {\n    // this fetch returns us is a promise and promise gives us the body\n    //of the response\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()) // this response gets the array of objects\n    .then(users => this.setState({\n      monsters: users\n    })) // this is getting one by one object.\n    .catch(error => console.log(\"exception\"));\n  } //arrow functions allows to set this when this thing is defined.\n  // when this class is loaded by react then it sees oh this class\n  // has the arrow function and it see this then it binds it to the component\n  //i.e with this class\n\n\n  // render method returns any\n  // whenever we update the state the render method is called again\n  // such as onClincking a button we are changing thr state\n  //everything inside render is jsx and here we are just micking an HTML code\n  //any parameter passed in the card list is a param\n  // here item b/w the cardList  is the children\n  // ex Rana in this example is the children\n  //map iterates over all the elements\n  //here we are using key because it hepls react to keep a track which item is getting changed and do not render everything.\n  // <CardList name=\"jatin\"> here name is the prop for CardList comnponentg\n  // children are the things b/w <CardList>   </CardList>\n  //In input if we use the type as password then it will hide the words\n  //on change call the function when event is triggered.\n  render() {\n    // destructuring allows to pull out the contents and put them inside the {}\n    // this is equal to\n    //const monsters = this.state.monsters;\n    //const searchFiels = this.state.searchField;\n    //it is just the easier way.\n    // here monsters and searchField are the new variables not the one in the state.\n    const _this$state = this.state,\n          monsters = _this$state.monsters,\n          searchField = _this$state.searchField;\n    const filteredMonster = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(SearchBox, {\n      placeholder: \"search monster\" //here e is the synthetic method\n      ,\n      handleChange: e => this.setState({\n        searchField: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(CardList, {\n      monsters: filteredMonster,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jatinpartaprana/Documents/reactCourse/monosters-rolodex/src/App.js"],"names":["React","Component","CardList","SearchBox","App","constructor","handleChange","e","setState","state","monsters","searchField","componentDidMount","fetch","then","response","json","users","catch","error","console","log","render","filteredMonster","filter","monster","name","toLowerCase","includes","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,SAASC,QAAT,QAAyB,4CAAzB;AACA,SAASC,SAAT,QAA0B,8CAA1B;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAC1BI,EAAAA,WAAW,GAAG;AACZ;;AADY,SAsBdC,YAtBc,GAsBEC,CAAD,IAAM;AACjB,WAAKC,QAAL;AACH,KAxBa;;AAEZ,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,EADC;AAEXC,MAAAA,WAAW,EAAE;AAFF,KAAb;AAID,GAPyB,CAS1B;;;AACAC,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACAC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EACqC;AADrC,KAEGF,IAFH,CAEQG,KAAK,IAAI,KAAKT,QAAL,CAAc;AAAEE,MAAAA,QAAQ,EAAEO;AAAZ,KAAd,CAFjB,EAEqD;AAFrD,KAGGC,KAHH,CAGSC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAY,WAAZ,CAHlB;AAID,GAjByB,CAmB1B;AACA;AACA;AACA;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACA;AACA;AACA;AANO,wBAO2B,KAAKb,KAPhC;AAAA,UAOCC,QAPD,eAOCA,QAPD;AAAA,UAOWC,WAPX,eAOWA,WAPX;AAQP,UAAMY,eAAe,GAAGb,QAAQ,CAACc,MAAT,CAAgBC,OAAO,IAC7CA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,CAAoCjB,WAAW,CAACgB,WAAZ,EAApC,CADsB,CAAxB;AAIA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACA,MAAA,WAAW,EAAC,gBADZ,CAEA;AAFA;AAGA,MAAA,YAAY,EAAIpB,CAAC,IAAI,KAAKC,QAAL,CAAc;AAACG,QAAAA,WAAW,EAAEJ,CAAC,CAACsB,MAAF,CAASC;AAAvB,OAAd,CAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME,oBAAC,QAAD;AAAU,MAAA,QAAQ,EAAEP,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF;AAUD;;AA9DyB;;AAgE5B,eAAenB,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from './components/search-box/search-box.component';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n  }\n\n  // when react renders or puts the component on the dom FOR THE FIRST TIME. and calls the block of code inside it.\n  componentDidMount() {\n    // this fetch returns us is a promise and promise gives us the body\n    //of the response\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json()) // this response gets the array of objects\n      .then(users => this.setState({ monsters: users })) // this is getting one by one object.\n      .catch(error => console.log(\"exception\"));\n  }\n\n  //arrow functions allows to set this when this thing is defined.\n  // when this class is loaded by react then it sees oh this class\n  // has the arrow function and it see this then it binds it to the component\n  //i.e with this class\n  handleChange = (e) =>{\n      this.setState\n  }\n\n  // render method returns any\n  // whenever we update the state the render method is called again\n  // such as onClincking a button we are changing thr state\n  //everything inside render is jsx and here we are just micking an HTML code\n  //any parameter passed in the card list is a param\n  // here item b/w the cardList  is the children\n  // ex Rana in this example is the children\n  //map iterates over all the elements\n  //here we are using key because it hepls react to keep a track which item is getting changed and do not render everything.\n  // <CardList name=\"jatin\"> here name is the prop for CardList comnponentg\n  // children are the things b/w <CardList>   </CardList>\n  //In input if we use the type as password then it will hide the words\n  //on change call the function when event is triggered.\n  render() {\n    // destructuring allows to pull out the contents and put them inside the {}\n    // this is equal to\n    //const monsters = this.state.monsters;\n    //const searchFiels = this.state.searchField;\n    //it is just the easier way.\n    // here monsters and searchField are the new variables not the one in the state.\n    const { monsters, searchField } = this.state;\n    const filteredMonster = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <SearchBox \n        placeholder=\"search monster\"\n        //here e is the synthetic method\n        handleChange = {e => this.setState({searchField: e.target.value})}\n        />\n        <CardList monsters={filteredMonster} />\n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}