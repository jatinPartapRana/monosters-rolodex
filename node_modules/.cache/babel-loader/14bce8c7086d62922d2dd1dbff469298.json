{"ast":null,"code":"var _jsxFileName = \"/Users/jatinpartaprana/Documents/reactCourse/monosters-rolodex/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport { CardList } from './components/card-list/card-list.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: []\n    };\n  } // when react renders or puts the component on the dom FOR THE FIRST TIME. and calls the block of code inside it.\n\n\n  componentDidMount() {\n    // this fetch returns us is a promise and promise gives us the body \n    //of the response\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()) // this response gets the array of objects\n    .then(users => this.setState({\n      monsters: users\n    })) // this is getting one by one object.\n    .catch(error => console.log('exception'));\n  } // render method returns any\n  // whenever we update the state the render method is called again \n  // such as onClincking a button we are changing thr state\n  //everything inside render is jsx and here we are just micking an HTML code\n  //any parameter passed in the card list is a param\n  // here item b/w the cardList  is the children\n  // ex Rana in this example is the children\n  //map iterates over all the elements \n  //here we are using key because it hepls react to keep a track which item is getting changed and do not render everything.\n  // <CardList name=\"jatin\"> here name is the prop for CardList comnponentg\n  // children are the things b/w <CardList>   </CardList>\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(CardList, {\n      name: \"jatin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, this.state.monsters.map(monster => React.createElement(\"h1\", {\n      key: monster.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \" \", monster.name))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jatinpartaprana/Documents/reactCourse/monosters-rolodex/src/App.js"],"names":["React","Component","CardList","App","constructor","state","monsters","componentDidMount","fetch","then","response","json","users","setState","catch","error","console","log","render","map","monster","id","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,SAASC,QAAT,QAAyB,4CAAzB;AACA,OAAO,WAAP;;AAGA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAC1BG,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAG;AADA,KAAb;AAGH,GANyB,CAQ5B;;;AACAC,EAAAA,iBAAiB,GAAE;AAChB;AACA;AACAC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EACoC;AADpC,KAECF,IAFD,CAEMG,KAAK,IAAI,KAAKC,QAAL,CAAc;AAAEP,MAAAA,QAAQ,EAAGM;AAAb,KAAd,CAFf,EAEmD;AAFnD,KAGCE,KAHD,CAGOC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAY,WAAZ,CAHhB;AAIF,GAhB2B,CAmB1B;AACA;AACA;AACA;AACC;AACI;AACA;AACA;AACA;AACA;AACA;;;AACJC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKb,KAAL,CAAWC,QAAX,CAAoBa,GAApB,CAAyBC,OAAD,IACxB;AAAI,MAAA,GAAG,EAAEA,OAAO,CAACC,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAuBD,OAAO,CAACE,IAA/B,CADA,CADD,CADA,CADF;AASJ;;AAxC2B;;AA2C5B,eAAenB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { CardList } from './components/card-list/card-list.component'\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(){\n      super();\n      this.state = {\n        monsters : []\n      }\n  }\n\n// when react renders or puts the component on the dom FOR THE FIRST TIME. and calls the block of code inside it.\ncomponentDidMount(){\n   // this fetch returns us is a promise and promise gives us the body \n   //of the response\n   fetch(\"https://jsonplaceholder.typicode.com/users\")\n   .then(response => response.json())  // this response gets the array of objects\n   .then(users => this.setState({ monsters : users})) // this is getting one by one object.\n   .catch(error => console.log('exception'))\n}\n\n\n  // render method returns any\n  // whenever we update the state the render method is called again \n  // such as onClincking a button we are changing thr state\n  //everything inside render is jsx and here we are just micking an HTML code\n   //any parameter passed in the card list is a param\n       // here item b/w the cardList  is the children\n       // ex Rana in this example is the children\n       //map iterates over all the elements \n       //here we are using key because it hepls react to keep a track which item is getting changed and do not render everything.\n       // <CardList name=\"jatin\"> here name is the prop for CardList comnponentg\n       // children are the things b/w <CardList>   </CardList>\n   render (){\n     return (\n       <div className=\"App\"> \n       <CardList name=\"jatin\">\n       {this.state.monsters.map((monster) => (\n        <h1 key={monster.id}> {monster.name}</h1>\n       )) }\n       </CardList>\n   </div>\n   );\n}\n\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}