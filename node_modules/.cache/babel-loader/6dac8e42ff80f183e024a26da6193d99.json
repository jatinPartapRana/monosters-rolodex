{"ast":null,"code":"import _classCallCheck from\"/Users/jatinpartaprana/Documents/reactCourse/monosters-rolodex/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jatinpartaprana/Documents/reactCourse/monosters-rolodex/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/jatinpartaprana/Documents/reactCourse/monosters-rolodex/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/jatinpartaprana/Documents/reactCourse/monosters-rolodex/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/jatinpartaprana/Documents/reactCourse/monosters-rolodex/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import logo from\"./logo.svg\";import{CardList}from\"./components/card-list/card-list.component\";import{SearchBox}from'./components/search-box/search-box.component';import\"./App.css\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);function App(){var _this;_classCallCheck(this,App);_this=_possibleConstructorReturn(this,_getPrototypeOf(App).call(this));_this.handleChange=function(e){_this.setState({searchField:e.target.value});};_this.state={monsters:[],searchField:\"\"};return _this;}// when react renders or puts the component on the dom FOR THE FIRST TIME. and calls the block of code inside it.\n_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;// this fetch returns us is a promise and promise gives us the body\n//of the response\nfetch(\"https://jsonplaceholder.typicode.com/users\").then(function(response){return response.json();})// this response gets the array of objects\n.then(function(users){return _this2.setState({monsters:users});})// this is getting one by one object.\n.catch(function(error){return console.log(\"exception\");});}//arrow functions allows to set this when this thing is defined.\n// when this class is loaded by react then it sees oh this class\n// has the arrow function and it see this then it binds it to the component\n//i.e with this class\n},{key:\"render\",// render method returns any\n// whenever we update the state the render method is called again\n// such as onClincking a button we are changing thr state\n//everything inside render is jsx and here we are just micking an HTML code\n//any parameter passed in the card list is a param\n// here item b/w the cardList  is the children\n// ex Rana in this example is the children\n//map iterates over all the elements\n//here we are using key because it hepls react to keep a track which item is getting changed and do not render everything.\n// <CardList name=\"jatin\"> here name is the prop for CardList comnponentg\n// children are the things b/w <CardList>   </CardList>\n//In input if we use the type as password then it will hide the words\n//on change call the function when event is triggered.\nvalue:function render(){// destructuring allows to pull out the contents and put them inside the {}\n// this is equal to\n//const monsters = this.state.monsters;\n//const searchFiels = this.state.searchField;\n//it is just the easier way.\n// here monsters and searchField are the new variables not the one in the state.\nvar _this$state=this.state,monsters=_this$state.monsters,searchField=_this$state.searchField;var filteredMonster=monsters.filter(function(monster){return monster.name.toLowerCase().includes(searchField.toLowerCase());});return React.createElement(\"div\",{className:\"App\"},React.createElement(\"h1\",null,\"Monosters Rolodex\"),React.createElement(SearchBox,{placeholder:\"search monster\"//here e is the synthetic method\n,handleChange:this.handleChange}),React.createElement(CardList,{monsters:filteredMonster}));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/jatinpartaprana/Documents/reactCourse/monosters-rolodex/src/App.js"],"names":["React","Component","CardList","SearchBox","App","handleChange","e","setState","searchField","target","value","state","monsters","fetch","then","response","json","users","catch","error","console","log","filteredMonster","filter","monster","name","toLowerCase","includes"],"mappings":"muBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,C,6BAEA,OAASC,QAAT,KAAyB,4CAAzB,CACA,OAASC,SAAT,KAA0B,8CAA1B,CACA,MAAO,WAAP,C,GAEMC,CAAAA,G,6DACJ,cAAc,qCACZ,uEADY,MAsBdC,YAtBc,CAsBC,SAAAC,CAAC,CAAG,CACf,MAAKC,QAAL,CAAc,CAAEC,WAAW,CAAGF,CAAC,CAACG,MAAF,CAASC,KAAzB,CAAd,EACH,CAxBa,CAEZ,MAAKC,KAAL,CAAa,CACXC,QAAQ,CAAE,EADC,CAEXJ,WAAW,CAAE,EAFF,CAAb,CAFY,aAMb,CAED;6EACoB,iBAClB;AACA;AACAK,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACQ,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADhB,CACqC;AADrC,CAEGF,IAFH,CAEQ,SAAAG,KAAK,QAAI,CAAA,MAAI,CAACV,QAAL,CAAc,CAAEK,QAAQ,CAAEK,KAAZ,CAAd,CAAJ,EAFb,CAEqD;AAFrD,CAGGC,KAHH,CAGS,SAAAC,KAAK,QAAIC,CAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAJ,EAHd,EAID,CAED;AACA;AACA;AACA;gBAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;uBACS,CACP;AACA;AACA;AACA;AACA;AACA;AANO,gBAO2B,KAAKV,KAPhC,CAOCC,QAPD,aAOCA,QAPD,CAOWJ,WAPX,aAOWA,WAPX,CAQP,GAAMc,CAAAA,eAAe,CAAGV,QAAQ,CAACW,MAAT,CAAgB,SAAAC,OAAO,QAC7CA,CAAAA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,CAAoCnB,WAAW,CAACkB,WAAZ,EAApC,CAD6C,EAAvB,CAAxB,CAIA,MACE,4BAAK,SAAS,CAAC,KAAf,EACA,kDADA,CAEE,oBAAC,SAAD,EACA,WAAW,CAAC,gBACZ;AAFA,CAGA,YAAY,CAAI,KAAKrB,YAHrB,EAFF,CAOE,oBAAC,QAAD,EAAU,QAAQ,CAAEiB,eAApB,EAPF,CADF,CAWD,C,iBA/DerB,S,EAiElB,cAAeG,CAAAA,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from './components/search-box/search-box.component';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n  }\n\n  // when react renders or puts the component on the dom FOR THE FIRST TIME. and calls the block of code inside it.\n  componentDidMount() {\n    // this fetch returns us is a promise and promise gives us the body\n    //of the response\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json()) // this response gets the array of objects\n      .then(users => this.setState({ monsters: users })) // this is getting one by one object.\n      .catch(error => console.log(\"exception\"));\n  }\n\n  //arrow functions allows to set this when this thing is defined.\n  // when this class is loaded by react then it sees oh this class\n  // has the arrow function and it see this then it binds it to the component\n  //i.e with this class\n  handleChange = e =>{\n      this.setState({ searchField : e.target.value});\n  }\n\n  // render method returns any\n  // whenever we update the state the render method is called again\n  // such as onClincking a button we are changing thr state\n  //everything inside render is jsx and here we are just micking an HTML code\n  //any parameter passed in the card list is a param\n  // here item b/w the cardList  is the children\n  // ex Rana in this example is the children\n  //map iterates over all the elements\n  //here we are using key because it hepls react to keep a track which item is getting changed and do not render everything.\n  // <CardList name=\"jatin\"> here name is the prop for CardList comnponentg\n  // children are the things b/w <CardList>   </CardList>\n  //In input if we use the type as password then it will hide the words\n  //on change call the function when event is triggered.\n  render() {\n    // destructuring allows to pull out the contents and put them inside the {}\n    // this is equal to\n    //const monsters = this.state.monsters;\n    //const searchFiels = this.state.searchField;\n    //it is just the easier way.\n    // here monsters and searchField are the new variables not the one in the state.\n    const { monsters, searchField } = this.state;\n    const filteredMonster = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n      <h1>Monosters Rolodex</h1>\n        <SearchBox \n        placeholder=\"search monster\"\n        //here e is the synthetic method\n        handleChange = {this.handleChange}\n        />\n        <CardList monsters={filteredMonster} />\n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}